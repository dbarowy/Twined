################################################

TWINED LANGUAGE: PROJECT DOCUMENTATION

INSTRUCTIONS:
    This text file contains documentation comments for various files in the Twined Language Project. Each comment block
    corresponds to a specific file in the project, providing a description of its purpose and version history.
    These comments allow the tracking of changes and versions across different modules of the project.

HOW TO TRACK VERSIONS:
    1. Each comment block includes a "VERSION_X.X" section indicating the version history.
    2. Update the version number (e.g., VERSION_0.1, VERSION_1.0) in each block when making changes or adding features.
    3. Maintain a log of changes under each version number to track the evolution of the project.

################################################

VERSION_1.0
    
    - specification.tex
        - added new parts for mostly working check point

################################################

################################################

VERSION_0.9

    - Parser.fs
        - added parsers to handle adding node info to the environment 
    
    - AST.fs
        - added Assignment and Node_info to types

    - Program.fs
        - Commented out code that wasn't necessary. 
        - added an environment and changes the way outputs are handled to accomidate the env
   
    - Evaluator.fs
        - addded environment to evaluator, now works for inputs with definistions or without
        definitions 
    
    - TODO 
        - Use text_samples docs as an input to the API and generate a text graph that will be parsed and converted into a gv file.
        - maybe we should start our program without having to first input a file right way.
        - New parameters to manipulate SVG building.
        - Maybe we also should test another API: Tesseract, so that we can capture image-text notes?

################################################

################################################

VERSION_0.8

    - Program.fs
        - Cleared the unused code and comments. 
   
    - text_samples
        - Created folder with plain text from a wikipedia page on the topic of photosynthesis. 
    
    - TODO 
        - Use text_samples docs as an input to the API and generate a text graph that will be parsed and converted into a gv file.
        - maybe we should start our program without having to first input a file right way.
        - New parameters to manipulate SVG building.
        - Maybe we also should test another API: Tesseract, so that we can capture image-text notes?

################################################

VERSION_0.7 

    - Program.fs
        - OpenAI API call is now working, but needs to be refined for its own specific promtps.
        - Need to handle promtp output to cycle back into the pipeline of parser and evaluator.
        - Check for powershell vs zsh was added

    - WEB 
        - Began to brainstorm a very simple visualization of the svgs with HTML and CSS. Check folder Web0.5
            follow instructions and install npm.
        - Tested a few elements on the screen for a future design.

    - AST.fs
        - Add new types for OpenAI call, and was thinking of adding new types to paramentize the properties of our
            generated SVGs such as color, size, and other types of graphs.

################################################

VERSION_0.6

    Program.fs 
        - New Prompt Menu for user interaction with txt and gv file.
        - Added menu options to be featured/explored.
        - Changed zhs to powershell to run on Windows.
        - Added function to open svg file. 
        - Began to brainstorm OpenAI API call for menu option 1 (expand graph).

    AST.fs
        - added Node_info type
    
    Evaluator.fs
        - added Node_info processing

    Parser.fs
        - added Node_info parser

################################################

VERSION_0.5

    AST.fs 
        - added Exit type to allow exit to be parsed

    Evaluator.fs
        - Added handling of the the Exit expression
    
    Parser.fs
        - added a parser to parse exit codes

    program
        - added ability to recursively ask the user for additional inputs
        to answer new questions, still need to hook up to a LLM API to see 
        if it functions when connected.


    Brainstorm
        - should figure out a way to open/reload the svg for the user if
        possible so they can see the information
        - still need to add an information section to each node to allow the
        user to read more about each topic



################################################

VERSION_0.4

    AST.fs, Parser.fs, Evaluator.fs:
        - Changed Str to Node_name to improve readibility
    
    Parser.fs:
        - changed edge_list function to allow spaces in node names. This means that every Node_name in
        a Node_list must be followed by a ',' e.g. (bob, Nancy,) or (bob,)

    text files:
        - made changes to several for generating new graphs to include in the report

    Program.fs:
        - todo add capability to input the desired output (png, svg, etc) and name output files 

    specification.tex:
        - Finished semantics 
        - added/edited examples
        - started design principles (dont really think we need both paragraphs but they exist)
        - added a paragraph to 

################################################

VERSION_0.3

    FOLDERS INPUT/OUTPUT: 

        - added folders to help with clutter, text folder holds text files that contain Graphviz
        representations of a text file
        - test holds text files with desired graphs in them
        - svg holds output from running the program

        - probably need a better system for this but for now it helps with readibility

    FILE: Parser.fs

        CHANGES:
            - added ability to have spaces in node names

        ISSUE:
            - I think that we need to adapt the parser to handle better cases of text input. Currently, 
            it can only accept input in the format: {mainEntity, (relatedEntity1, relatedEntity2, ...)}.  
            

    FILE: Program.fs

        CHANGES
            - added code that takes the name of the graphviz text file and executes it,
            stores the outcome in the svg_folder


################################################

VERSION_0.2

    FOLDER INPUT/OUTPUT: 

        IDEA:
            - Maybe we should organize user input files into a structured folder system,
              where each file's corresponding gv.txt and svg files are saved within its respective folder?

    FILE: Parser.fs

        ISSUE:
            - I think that we need to adapt the parser to handle better cases of text input. Currently, 
            it can only accept input in the format: {mainEntity, (relatedEntity1, relatedEntity2, ...)}. 
                
    FILE: Evaluator.fs

        CHANGES

            - Now, the evalExpr function recursively converts our AST into DOT language, 
              for Graphviz graph visualization by handling nodes with strings, numbers, 
              and nested expressions to create DOT-compatible edges, in the formart that the Parser
              is expecting. 
            

    FILE: Program.fs

        CHANGES
            - Once AST is evaluated, it writes to 'gv.txt'.
            - Improved error message and added user feedback for generating AST. 

################################################

VERSION_0.1

    FILE: AST.fs

        CHANGES
            - Initial Tests
            - Updated type values, removed from parser


################################################

VERSION_0.0

    FILE: AST.fs

        DESCRIPTION:
            This file contains the abstract syntax tree (AST) definitions used in the project. 
            The AST represents the structure of the code parsed by the parser.

        CHANGES
            - Initial Tests

    FILE: Evaluator.fs

        DESCRIPTION:
            This file contains the evaluator module responsible for interpreting and evaluating
            the AST generated by the parser. It implements the logic for executing the code
            represented by the AST nodes.

        CHANGES
            - Initial Tests

    FILE: Parser.fs

        DESCRIPTION:
            This file contains the parser module responsible for parsing input code into 
            an abstract syntax tree (AST). It defines the grammar rules and parsing logic 
            for the supported language features.

        CHANGES
            - Initial Tests

    FILE: Program.fs

        DESCRIPTION:
            This file contains the entry point and main program logic for the project. It 
            coordinates the interactions between the parser, evaluator, and other modules 
            to execute the program.
        
        CHANGES
            - Initial Tests